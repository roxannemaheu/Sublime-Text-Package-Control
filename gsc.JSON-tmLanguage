{ 
	"name": "GSC",
	"scopeName": "source.gsc",
	"fileTypes": ["gsc","csc","gsh"],
    "foldingStartMarker": "^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))", 
    "foldingStopMarker": "^\\s*\\*/|^\\s*\\}", 
	"patterns": [ 
		{"include": "#code"} 
	],
	"repository": {
		"constants": {
			"patterns": [
                {
                    "name": "constant.numeric.source.gsc", 
                    "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.source.gsc"
                        }
                    }, 
                    "name": "string.quoted.double.literal.source.gsc", 
                    "match": "@\"([^\"]|\"\")*\""
                }, 
                {
                    "patterns": [
                        {
                            "name": "constant.character.escape.source.gsc", 
                            "match": "\\\\."
                        }
                    ], 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.source.gsc"
                        }
                    }, 
                    "end": "\"", 
                    "name": "string.quoted.double.source.gsc", 
                    "begin": "\"", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.source.gsc"
                        }
                    }
                }, 
				{
					"name": "constant.language.source.gsc",
					"match": "\\b(undefined|false|true|self|world|classes|level|game|anim|vararg)\\b"
				}
			]
		},
        "preprocessor": {
            "patterns": [
                {
                    "captures": {
                        "2": {
                            "name": "entity.name.function.preprocessor.source.gsc"
                        }
                    }, 
                    "name": "keyword.preprocessor.source.gsc", 
                    "match": "^\\s*#\\s*(define)\\b\\s*(\\S*)"
                }, 
                {
                    "captures": {
                        "2": {
                            "name": "keyword.control.import.source.gsc"
                        }
                    }, 
                    "name": "keyword.preprocessor.source.gsc", 
                    "match": "^\\s*#\\s*(if|else|elif|endif|define|insert|using|precache)\\b"
                },
                {
                    "captures": {
                        "2": {
                            "name": "meta.namespace.identifier"
                        }
                    }, 
                    "name": "keyword.preprocessor.source.gsc", 
                    "match": "^\\s*#\\s*(namespace)\\b"
                }
            ]
        }, 
        "keywords": {
			"patterns": [
                {
                    "name": "keyword.control.source.gsc", 
                    "match": "\\b(if|else|while|for|foreach|in|do|return|continue|break|switch|case|default)\\b"
                }, 
                {
                    "name": "keyword.operator.source.gsc", 
                    "match": "\\b(size|assert|assertmsg|notify|endon)\\b"
                }, 
                {
                    "name": "keyword.other.source.gsc", 
                    "match": "\\b(class|function|var|wait|thread|waittill|waittillmatch|waittillframeend|isdefined|constructor|destructor|autoexec|private|const)\\b"
                }
			]
		},
		"comments": {
			"patterns" : [
				{
					"name": "comment.block.gsc",
					"begin": "/\\*",
					"end": "\\*/\\n?",
					"comment": "Block Comment"
				},
				{
					"name": "comment.line.double-slash.gsc",
					"match": "//.*$\\n?",
					"comment": "Line Comment"
				}
			]
		},
		"documentation": {
			"patterns": [
				{
					"name": "comment.block.documentation.gsc",
					"begin": "/@",
					"end": "@/",
					"comment": "Block Comment"
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#block"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#documentation"
				}
			]
		},
		"block": {
			"patterns": [
				{
					"patterns": [
						{
						"include": "#code"
						}
					], 
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.source.gsc"
						}
					}, 
					"begin": "{", 
					"end": "}", 
					"name": "meta.block.source.gsc", 
					"endCaptures": {
						"0": {
						"name": "punctuation.section.block.end.source.gsc"
						}
					}
				},
				{
					"patterns": [
						{
						"include": "#code"
						}
					], 
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.source.gsc"
						}
					}, 
					"name": "meta.devblock.source.gsc", 
					"begin": "/#", 
					"end": "#/", 
					"endCaptures": {
						"0": {
						"name": "punctuation.section.block.end.source.gsc"
						}
					}
				}
			]
		} 
    },
	"uuid": "81223a8d-3586-41df-8606-255ca394f9d7"
}
